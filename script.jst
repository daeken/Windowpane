var <% if errorChecking %> a = alert, <% end %> b, y, z, g, v<% if drawMulti %>, o = (new Date()).getTime()<% end %><% if programs.size != 0 %>, <%= programs.keys.join ', ' %><% end %>;
function r() {
	z = document.getElementById(9);
	b = document.body;
	g = z.getContext('experimental-webgl');
	
	<% if (fshaders.size + vshaders.size) != 0 %>
	var <%= fshaders.keys.map{|x| x + ' = s(' + fshaders[x].jsstr + ', 1)'}.join ', ' %><%if fshaders.size != 0 %>, <%end%><%= vshaders.keys.map{|x| x + ' = s(' + vshaders[x].jsstr + ', 0)'}.join ', ' %>;
	<% end %>
	
	<% programs.each do |p, k| %>
		<% k.each_index do |xi| x = k[xi] %>
			g.attachShader(<% if xi == 0 %> <%= p %> = g.createProgram() <% else %> <%= p %> <% end %>, <%= if fshadersinline.include? x then 's(' + fshadersinline[x].jsstr + ', 1)' elsif vshadersinline.include? x then 's(' + vshadersinline[x].jsstr + ', 0)' else x end %>);
		<% end %>
		g.linkProgram(<%= p %>)<% if errorChecking %>;
		if(!g.getProgramParameter(<%= p %>, g.LINK_STATUS))
			a("Could not initialise shaders"); <% end %>
		<% end %>
	
	g.bindBuffer(g.ARRAY_BUFFER, v = g.createBuffer());
	g.bufferData(g.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1]), g.STATIC_DRAW);
	
	(window.onresize = function() {
		z.width = 1;
		g.viewport(0, 0, (g.viewportWidth = z.width = b.clientWidth), (g.viewportHeight = z.height = b.clientHeight-z.offsetTop))<% if not drawMulti %>; d()<% end %>
	})()<% if drawMulti %>;
	d()<% end %>
}

function s(s, t) {
	g.shaderSource(y = g.createShader(t>0?g.FRAGMENT_SHADER:g.VERTEX_SHADER), s);
	g.compileShader(y);
	<% if errorChecking %>
	if(!g.getShaderParameter(y, g.COMPILE_STATUS))
		a(g.getShaderInfoLog(y));
	<% end %>
	return y
}

function d() {
	g.useProgram(<%=remap['main'] %>);
	var a = g.getAttribLocation(<%=remap['main'] %>, 'pos');
	<% if drawMulti %>
	g.uniform1f(g.getUniformLocation(<%=remap['main'] %>, 'time'), ((new Date()).getTime()-o) / 1000);
	<% end %>
	g.uniform2f(g.getUniformLocation(<%=remap['main'] %>, 'resolution'), g.viewportWidth, g.viewportHeight);
	g.bindBuffer(g.ARRAY_BUFFER, v);
	g.vertexAttribPointer(a, 2, g.FLOAT, 0, 0, 0);
	g.enableVertexAttribArray(a);
	g.drawArrays(g.TRIANGLES, 0, 6)<% if drawMulti %>;
	(window.requestAnimationFrame || 
		window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		function(c) {
			setTimeout(c, 1000 / 60);
		})(d, z)
	<% end %>
}
