<title>Raymarch</title>

<singleframe>

<fshader raymarch>
uniform vec2 resolution;
uniform float time;

struct Ray {
	vec3 o, d;
};

float f(float x, float z) {
	return cos(x*10.0)*sin(z/10.0) - 0.5;
}

Ray genRay(vec2 p) {
	float fovx = 3.1416/4.0;
	float fovy = resolution.y/resolution.x*fovx;
	vec3 o = vec3(0.0, 1.0, 0.0);
	vec3 d = vec3(p.x * tan(fovx), p.y * tan(fovy), 1.0) - o;
	return Ray(o, normalize(d));
}

bool castRay(Ray r, out float ot) {
	float rt = 0.001, delt = 0.001, lh = 0.0, ly = 0.0;
	for(float t = 0.001; t < 10.0; t += 0.01) {
		vec3 p = r.o + r.d * rt;
		float h = f(p.x, p.z);
		if(p.y < h) {
			ot = rt - delt + delt * (lh-ly) / (p.y-ly-h+lh);
			return true;
		}
		delt = t * 0.001;
		rt += delt;
		if(rt >= 10.0)
			return false;
		lh = h;
		ly = p.y;
	}
	return false;
}

vec4 terrainColor(Ray r, float t) {
	vec3 p = r.o + r.d * t;
	vec3 n = normalize(vec3(f(p.x-0.000001,p.z) - f(p.x+0.000001,p.z), 2.0*0.000001, f(p.x,p.z-0.000001) - f(p.x,p.z+0.000001)));
	return vec4(n.x, n.y, n.z, 1.0);
}

vec4 skyColor(vec2 p) {
	return vec4(p.x, 0.0, p.y, 1.0);
}

void main(void)
{
 vec2 p = gl_FragCoord.xy / resolution.xy * 2.0 - 1.0;
 
 Ray r = genRay(p);
 float t;
 if(castRay(r, t))
 	gl_FragColor = terrainColor(r, t);
 else
 	gl_FragColor = skyColor(p);
}
</fshader>

<program>raymarch</program>
